# Generated by Django 4.1.7 on 2023-04-19 09:23

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Collection",
            fields=[
                (
                    "id",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=100)),
                ("logo", models.CharField(blank=True, max_length=200)),
                ("contracts", models.JSONField()),
                ("timestamp", models.DateTimeField(auto_now=True)),
                ("verified", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="NftType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Type name")),
            ],
        ),
        migrations.CreateModel(
            name="Nft",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Nft name")),
                (
                    "img_link",
                    models.CharField(max_length=255, verbose_name="Link to nft image"),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, max_digits=12, verbose_name="Nft price"
                    ),
                ),
                ("status", models.CharField(max_length=155)),
                ("total_profit", models.DecimalField(decimal_places=2, max_digits=14)),
                ("opensea_link", models.CharField(max_length=255, unique=True)),
                ("deals_number", models.IntegerField()),
                ("monthly_roi", models.DecimalField(decimal_places=2, max_digits=14)),
                ("last_sale_date", models.DateTimeField()),
                (
                    "max_profit_per_sale",
                    models.DecimalField(decimal_places=2, max_digits=14),
                ),
                (
                    "min_profit_sale",
                    models.DecimalField(decimal_places=2, max_digits=14),
                ),
                ("average_sale_duration", models.CharField(max_length=355, null=True)),
                ("average_hold_duration", models.CharField(max_length=355, null=True)),
                (
                    "royalty",
                    models.DecimalField(
                        decimal_places=2, max_digits=5, verbose_name="Royalty percent"
                    ),
                ),
                (
                    "buy_link",
                    models.CharField(max_length=255, verbose_name="Link to buy nft"),
                ),
                ("update_time", models.DateTimeField(auto_now=True)),
                (
                    "nft_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nft_type",
                        to="nftion.nfttype",
                        verbose_name="Type of nft",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoryPrice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ticker", models.CharField(max_length=155)),
                ("price", models.FloatField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
            ],
            options={
                "unique_together": {("ticker", "date")},
            },
        ),
    ]
